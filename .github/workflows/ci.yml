name: CI

on:
  push:
    branches:

jobs:
  go-tests:
    name: Go tests
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
      - run: go test -v -coverprofile=go-coverage.out -covermode=atomic -coverpkg=./... ./...
      - name: Show coverage
        run: go tool cover -func=go-coverage.out

  build:
    name: Generate and lint
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
      - run: make build
      - uses: actions/setup-node@v4
        with:
          node-version-file: ./js/.nvmrc
      - uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm install --prefer-offline --no-audit
        working-directory: js
      - name: Check that generated files are up to date (jsFunctions.go and variables.json)
        run: |
          go generate -x ./...
          git diff
          exit $(git diff | wc -l)
      - run: npm run lint
        working-directory: js
      - name: Typescript type checks
        run: npx tsc --noEmit
        working-directory: js

  e2e-tests:
    name: End-to-end tests
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod

      - run: make build

      - name: Remove source code
        run: |
          # delete all files, except the binary, config, NAF and other data files used by tests
          find . \
            ! -name 'sfdata' \
            ! -name '*.toml' \
            ! -name 'test*.sh' \
            ! -name 'sfdata-wrapper.sh' \
            ! -name 'diff-or-update-golden-master.sh' \
            ! -name 'mongodb-container.sh' \
            ! -name 'populate-from-objects.sh' \
            ! -name 'remove-random_order.sh' \
            ! -name '*.txt' \
            ! -name '*.csv' \
            ! -name '*.json' \
            ! -name '*.excel' \
            ! -name 'objects.js' \
            -type f \
            -exec rm -v {} +

      - name: CrÃ©e le fichier de configuration minimal
        run: |
          touch config.toml
          echo "[log]" >> config.toml
          echo "level = \"error\"" >> config.toml

      - run: ./tests/test-cli.sh

      - run: ./tests/test-import.sh

      - run: ./tests/test-validate.sh

      - run: ./tests/test-check.sh

  coverage:
    name: Send coverage data to Codacy
    needs:
      - go-tests
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
#      - uses: actions/download-artifact@v4
#        with:
#          name: go-coverage-report
      - run: cat lcov.info
#      - uses: codacy/codacy-coverage-reporter-action@master
#        with:
#          project-token: ${{ secrets.CODACY_REPOSITORY_TOKEN_FOR_COVERAGE }}
#          coverage-reports: go-coverage.xml,lcov.info
