components:
  schemas:
    Compact:
      properties:
        fromBatchKey:
          type: string
    PurgeBatch:
      properties:
        fromBatch:
          type: string
        debugForKey:
          type: string
        IUnderstandWhatImDoing:
          type: boolean
    Public:
      properties:
        batch:
          type: string
        key:
          type: string
    Import:
      properties:
        batch:
          type: string
        noFilter:
          type: boolean
          description: Permet de poursuivre l'importation même si aucun filtre n'est fourni
        parsers:
          type: string
    Check:
      properties:
        batch:
          type: string
        parsers:
          type: string
    Reduce:
      properties:
        batch:
          type: string
        key:
          type: string
        features:
          type: string
    Validate:
      properties:
        collection:
          type: string
          description: "RawData ou ImportedData"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
info:
  contact:
    name: "contact support"
    email: "contact@signaux-faibles.beta.gouv.fr"
  description: |-
    Cette API centralise toutes les fonctionnalités du module de traitement de données [openSignauxFaibles](https://github.com/signaux-faibles/opensignauxfaibles)  
    Ce [projet](https://beta.gouv.fr/startups/signaux-faibles.html) fournit une plateforme technique à l'exploitation des signaux faibles pour anticiper les difficultés des entreprises  

    La plateforme fournit les services suivants    
    - Gestion des batches d'intégration  
    - Lancement/ordonnancement des traitements  
    - Export et consultation des données  

    Toutes les erreurs rencontrées lors du traitement seront signalées par le statut `HTTP 500` assorti du message d'erreur ayant provoqué le défaut du traitement.  
    Par ailleurs, tous les services authentifiés sont succeptibles de renvoyer le statut `HTTP 401` dans le cas où l'authentification est erronée.  Le code `HTTP 403` est également communiqué lorsque les attributions sont insuffisantes pour traiter la requête.  
    Dans le cas où une requête est malformée, le code `HTTP 400` sera renvoyé assorti d'un message indiquant l'erreur rencontrée dans l'analyse du corps de la requête
  license:
    name: Licence MIT
    url: https://raw.githubusercontent.com/signaux-faibles/opensignauxfaibles/master/LICENSE
  title: API openSignauxFaibles
  version: "1.1"
paths:
  /api/data/compact:
    post:
      summary: compacter la base de données
      description: |-
        Ce traitement permet le compactage de la base de données.  
        Ce compactage a pour effet de réduire tous les objets en clé uniques comportant dans la même arborescence toutes les données en rapport avec ces clés.  
        Ce traitement est nécessaire pour rendre disponible les données à /api/data/reduce les nouvelles données importées.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Compact"
            example:
              fromBatchKey: 1802
      responses:
        "200":
          description: Le traitement s'est bien déroulé
          content:
            application/json:
              schema:
                type: string
              example: "ok"
      security:
        - BearerAuth: []
      tags:
        - Traitements
  /api/data/import:
    post:
      description:
        Effectue l'import de tous les fichiers du batch donné en paramètre
        Pour exécuter tous les parsers, il faut ne pas spécifier la propriété parsers ou lui donner la valeur null.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Import"
            example:
              batch: 1802
              parsers:
                - altares
                - cotisation
      responses:
        "200":
          description: Le traitement s'est bien déroulé
          content:
            application/json:
              schema:
                type: string
              example: ok
        "404":
          description: Un des parsers demandé n'est pas reconnu
          content:
            application/json:
              schema:
                type: string
              example: justAnExampleParser n'est pas un parser reconnu
      security:
        - BearerAuth: []
      summary: importer des fichiers
      tags:
        - Traitements
  /api/data/check:
    post:
      description:
        Vérifie la validité du batch sur le point d'être importé et des fichiers qui le constituent.
        Pour exécuter tous les parsers, il faut ne pas spécifier la propriété parsers ou lui donner la valeur null.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Check"
            example:
              batch: 1802
              parsers:
                - altares
                - cotisation
      responses:
        "200":
          description: Le batch est valide et les rapports de parsing stockés dans la collection Journal.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reports:
                    type: array
                    items:
                      type: string
                    description: rapports de parsing de chaque fichier mentionné dans le batch
                    example:
                      - "/../lib/urssaf/testData/debitCorrompuTestData.csv: intégration terminée, 5 lignes traitées, 2 erreures fatales, 0 rejets, 0 lignes filtrées, 3 lignes valides"
        "404":
          description: Le batch est inexistant ou un des parsers demandé n'est pas reconnu.
          content:
            application/json:
              schema:
                type: string
              example: justAnExampleParser n'est pas un parser reconnu
      summary: Vérifier la validité d'un batch avant son importation
      tags:
        - Traitements
  /api/data/public:
    post:
      description: |-
        Alimente la collection Public avec les objets calculés pour le batch cité en paramètre, à partir de la collection RawData.  
        Le traitement prend en paramètre la clé du batch (obligatoire) et un SIREN (optionnel). Lorsque le SIREN n'est pas précisé, tous les objets lié au batch sont traités, à conditions qu'ils soient dans le périmètre de scoring "algo2".
        Cette collection sera ensuite accédée par les utilisateurs pour consulter les données des entreprises.  
        Des niveaux d'accéditation fins (ligne ou colonne) pour la consultation de ces données peuvent être mis en oeuvre.  
        Ces filtrages sont effectués grace à la notion de scope. Les objets et les utilisateurs disposent d'un ensemble de tags et les objets partageant au moins un tag avec les utilisateurs peuvent être consultés par ceux-ci.  
        Ces tags sont exploités pour traiter la notion de région (ligne) mais aussi les permissions (colonne).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Public"
            example:
              batch: "1805"
              key: "012345678"
      responses:
        "200":
          description: Le traitement s'est bien déroulé
          content:
            application/json:
              schema:
                type: string
              example: ok
      security:
        - BearerAuth: []
      summary: publier les données
      tags:
        - Traitements
  /api/data/reduce:
    post:
      description: |-
        Alimente la collection Features en calculant les variables avec le traitement mapreduce demandé dans la propriété `features`  
        Le traitement remplace les objets similaires en sortie du calcul dans la collection Features, les objets non concernés par le traitement ne seront ainsi pas remplacés, de sorte que si un seul siret est demandé le calcul ne remplacera qu'un seul objet.  
        Ces traitements ne prennent en compte que les objets déjà compactés.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reduce"
            example:
              batch: "1805"
              features: "algo2"
              key: "012345678901234"
      responses:
        "200":
          description: Le traitement s'est bien déroulé
          content:
            application/json:
              schema:
                type: string
              example: ok
      security:
        - BearerAuth: []
      summary: calculer les variables
      tags:
        - Traitements
  /api/data/purge:
    post:
      description: |-
        /!\ ce traitement est destructif et irréversible /!\
        Supprime les données dans les objets de la collection RawData pour les batches suivant le numéro de batch donné.
        La propriété `debugForKey` permet de traiter une entreprise en fournissant son siren, le résultat n'impacte pas la collection RawData mais est déversé dans purgeBatch_debug à des fins de vérifications.
        Lorsque `key` n'est pas fourni, le traitement s'exécute sur l'ensemble de la base, et dans ce cas la propriété IUnderstandWhatImDoing doit être fournie à la valeur `true` sans quoi le traitement refusera de se lancer.
        /!\ ce traitement est destructif et irréversible /!\
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PurgeBatch"
            example:
              fromBatch: "1805"
              key: "012345678901234"
              IUnderstandWhatImDoing: true
      responses:
        "200":
          description: Le traitement s'est bien déroulé
          content:
            application/json:
              schema:
                type: string
              example: ok
      security:
        - BearerAuth: []
      summary: calculer les variables
      tags:
        - Traitements
  /api/data/etablissements:
    get:
      description: Exporte la liste des établissements depuis la collection Public vers un fichier compressé au format gzip contenant une ligne JSON par document.
      parameters:
        - in: query
          name: key
          schema:
            type: integer
          required: false
          description: Numéro SIREN à utiliser pour filtrer les résultats.
      responses:
        "200":
          description: Les établissements ont été exportés dans le fichier fourni en réponse.
          content:
            application/json:
              schema:
                type: string
      security:
        - BearerAuth: []
      tags:
        - Traitements
  /api/data/entreprises:
    get:
      description: Exporte la liste des entreprises depuis la collection Public vers un fichier compressé au format gzip contenant une ligne JSON par document.
      parameters:
        - in: query
          name: key
          schema:
            type: integer
          required: false
          description: Numéro SIREN à utiliser pour filtrer les résultats.
      responses:
        "200":
          description: Les entreprises ont été exportés dans le fichier fourni en réponse.
          content:
            application/json:
              schema:
                type: string
      security:
        - BearerAuth: []
      tags:
        - Traitements
  /api/data/validate:
    post:
      description: Vérifie la validité des entrées de données contenues dans les documents de la collection RawData ou ImportedData.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Validate"
            example:
              collection: "RawData"
      responses:
        "200":
          description: Les entrées invalides ont été exportées dans le fichier fourni en réponse.
          content:
            application/json:
              schema:
                type: string
      security:
        - BearerAuth: []
      tags:
        - Traitements
openapi: "3.0.0"
