package main

import (
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

// This script is run by `go generate`, as specified in data_validation.go

// Reads all .json files in the specified folder
// and encodes them as strings maps in validationSchemas.go
func bundleValidationSchemas(schemaDir string) {
	files, err := ioutil.ReadDir(schemaDir)
	if err != nil {
		log.Fatal(err)
	}

	out, err := os.Create("validationSchemas.go")
	if err != nil {
		log.Fatal(err)
	}
	out.Write([]byte("/* Generated by bundle-schemas.go - DO NOT EDIT */\n\npackage engine\n\nvar validationSchemas = map[string]string{\n"))

	// For each file in folder
	for _, file := range files {
		if shouldInclude(file) {
			out.Write([]byte(`"` + file.Name() + `"` + ": `"))

			content, err := ioutil.ReadFile(filepath.Join(schemaDir, file.Name()))
			if err != nil {
				log.Fatal(err)
			}
			// stringFunction := string(stringFunction)
			// stringFunction = strings.Trim(stringFunction, "\n")

			out.Write([]byte(content))
			out.Write([]byte("`,\n"))
		}
	}
	out.Write([]byte("}\n"))
}

func main() {
	schemaDir := filepath.Join("..", "..", "validation")
	bundleValidationSchemas(schemaDir) // bundle *.json files to validationSchemas.go
}

func shouldInclude(file os.FileInfo) bool {
	return strings.HasSuffix(file.Name(), ".json")
}
